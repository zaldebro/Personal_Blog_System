apiVersion: v1
kind: Service
metadata:
  name: mongo-headless
  namespace: default
  labels:
    replicaset: MainRepSet
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
    name: mongoport
  clusterIP: None
  selector:
    replicaset: MainRepSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mainrepset
spec:
  serviceName: mongo-headless
  replicas: 3
  selector:
    matchLabels:
      replicaset: MainRepSet
  template:
    metadata:
      labels:
        replicaset: MainRepSet
    spec:
      containers:
        - name: mongo
          image: mongo
          volumeMounts: 
          - name: database
            mountPath: /data/db
          command:
            - bash
            - "-c"
            - | 
              set -ex 
              mongod --bind_ip 0.0.0.0 --replSet MainRepSet
          lifecycle:
            postStart: 
              exec: 
                command: 
                - bash
                - "-c"
                - |
                  set -ex
                  until [[ $(mongosh --eval "db.runCommand({serverStatus:1}).ok") ]];do sleep 1 ; done
                  # 当前节点不在集群中时，开始执行如下初始化流程
                  if [[ ! $(mongosh --quiet --eval "rs.isMaster().setName") ]];then
                    if [[ $(hostname) =~ 2 ]];then
                      mongosh --eval 'rs.initiate( 
                      {_id:"MainRepSet", 
                        members:[
                        {_id:0,host:"mainrepset-0.mongo-headless.default.svc.cluster.local:27017",priority:90}, 
                        {_id:1,host:"mainrepset-1.mongo-headless.default.svc.cluster.local:27017",priority:80}, 
                        {_id:2,host:"mainrepset-2.mongo-headless.default.svc.cluster.local:27017",priority:70} 
                        ]
                      })' 
                    fi
                  fi
          ports:
            - containerPort: 27017
              name: mongoport
  volumeClaimTemplates:
  - metadata: 
      name: database
      annotations:
        volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"   #managed-nfs-storage为我们创建的storage-class名称
    spec: 
      accessModes: [ "ReadWriteOnce" ]
      resources: 
        requests: 
          storage: 1Gi
